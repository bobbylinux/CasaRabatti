Define a new class named Person. The Person class should contain a first name, middle name, last name
and age. Your class should have following methods:

•A default constructor

•A constructor that accepts all three names and age

•Setters for each instance variable

•Setter called setName() that allows setting of all three names

•Getters for each instance variable

•A boolean method to check whether a given first name is the same as the first name of this person.

•A boolean method to check whether a given middle name is
the same as the middle name of this
person.

•A boolean method to check whether a given last name is
the same as the last name of this person.

•A void method to increment the age by one year. Takes no parameters.

•A toString method that returns a string of the form: “Full name is nn years old”. Example:
Jeff McKenzie is 30 years old.

•An equals method that will return true if this person and
the parameter person contain the same
name and age. See the document posted in D2L on the equals method for help on writing an equals
method that overrides the equals method in the Object class.

•Include Javadoc comment blocks for the Person class header and for each constructor and method
in the Person class. 

For comparing names, use the String.equals() method. Do not use the == operator.
Throw a NumberFormatException if the age passed in is invalid. Include a String parameter when you
throw the exception that says the age is invalid. An example of how to throw the exception:

if(conditional_test)
throw new NumberFormatException(“Error message here”);

You do not need to submit a test program, but you should write a test program to test the various methods of
your Person class.



The equals()method

•The equals()
 method is defined in the Object class and is inherted by all classes.

•The parameter type is Object.

•The return type is boolean – true if equal; false if not.

•The equals method in the Object class tests for equality using the == operator, so it does a
 shallow test – tests object references to see if they are aliases.

•You must override the equals() method in the Object class
   o Do not overload it (the author’s Clock class overloads the equals method)

•You have to first verify that the parameter is the
 correct type using the instance of operator

•If the parameter is the correct type, then cast the
 parameter to correct type and then compare
 instance variables for equality

•Note: need to override the hashCode() method also 


 Example of equals method for Clock class that overrides the Object class equals method:

// This method header overrides the Object class equals method
public boolean equals(Object otherClock)
{
   if (otherClock instanceof Clock)// is param a clock?
   {

	Clock other = (Clock)otherClock;	// cast to clock
          // Test instance variables to see if equal
             return (hr == other.hr && min == other.min && sec == other.sec);
   }
    else return false; // not a clock so can’t be equal
} 